// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/11/2019 16:09:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    aes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module aes_vlg_sample_tst(
	clock,
	keyIni,
	plainText,
	sampler_tx
);
input  clock;
input [127:0] keyIni;
input [127:0] plainText;
output sampler_tx;

reg sample;
time current_time;
always @(clock or keyIni or plainText)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module aes_vlg_check_tst (
	outAes,
	sampler_rx
);
input [127:0] outAes;
input sampler_rx;

reg [127:0] outAes_expected;

reg [127:0] outAes_prev;

reg [127:0] outAes_expected_prev;

reg [127:0] last_outAes_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	outAes_prev = outAes;
end

// update expected /o prevs

always @(trigger)
begin
	outAes_expected_prev = outAes_expected;
end


// expected outAes[ 127 ]
initial
begin
	outAes_expected[127] = 1'bX;
end 
// expected outAes[ 126 ]
initial
begin
	outAes_expected[126] = 1'bX;
end 
// expected outAes[ 125 ]
initial
begin
	outAes_expected[125] = 1'bX;
end 
// expected outAes[ 124 ]
initial
begin
	outAes_expected[124] = 1'bX;
end 
// expected outAes[ 123 ]
initial
begin
	outAes_expected[123] = 1'bX;
end 
// expected outAes[ 122 ]
initial
begin
	outAes_expected[122] = 1'bX;
end 
// expected outAes[ 121 ]
initial
begin
	outAes_expected[121] = 1'bX;
end 
// expected outAes[ 120 ]
initial
begin
	outAes_expected[120] = 1'bX;
end 
// expected outAes[ 119 ]
initial
begin
	outAes_expected[119] = 1'bX;
end 
// expected outAes[ 118 ]
initial
begin
	outAes_expected[118] = 1'bX;
end 
// expected outAes[ 117 ]
initial
begin
	outAes_expected[117] = 1'bX;
end 
// expected outAes[ 116 ]
initial
begin
	outAes_expected[116] = 1'bX;
end 
// expected outAes[ 115 ]
initial
begin
	outAes_expected[115] = 1'bX;
end 
// expected outAes[ 114 ]
initial
begin
	outAes_expected[114] = 1'bX;
end 
// expected outAes[ 113 ]
initial
begin
	outAes_expected[113] = 1'bX;
end 
// expected outAes[ 112 ]
initial
begin
	outAes_expected[112] = 1'bX;
end 
// expected outAes[ 111 ]
initial
begin
	outAes_expected[111] = 1'bX;
end 
// expected outAes[ 110 ]
initial
begin
	outAes_expected[110] = 1'bX;
end 
// expected outAes[ 109 ]
initial
begin
	outAes_expected[109] = 1'bX;
end 
// expected outAes[ 108 ]
initial
begin
	outAes_expected[108] = 1'bX;
end 
// expected outAes[ 107 ]
initial
begin
	outAes_expected[107] = 1'bX;
end 
// expected outAes[ 106 ]
initial
begin
	outAes_expected[106] = 1'bX;
end 
// expected outAes[ 105 ]
initial
begin
	outAes_expected[105] = 1'bX;
end 
// expected outAes[ 104 ]
initial
begin
	outAes_expected[104] = 1'bX;
end 
// expected outAes[ 103 ]
initial
begin
	outAes_expected[103] = 1'bX;
end 
// expected outAes[ 102 ]
initial
begin
	outAes_expected[102] = 1'bX;
end 
// expected outAes[ 101 ]
initial
begin
	outAes_expected[101] = 1'bX;
end 
// expected outAes[ 100 ]
initial
begin
	outAes_expected[100] = 1'bX;
end 
// expected outAes[ 99 ]
initial
begin
	outAes_expected[99] = 1'bX;
end 
// expected outAes[ 98 ]
initial
begin
	outAes_expected[98] = 1'bX;
end 
// expected outAes[ 97 ]
initial
begin
	outAes_expected[97] = 1'bX;
end 
// expected outAes[ 96 ]
initial
begin
	outAes_expected[96] = 1'bX;
end 
// expected outAes[ 95 ]
initial
begin
	outAes_expected[95] = 1'bX;
end 
// expected outAes[ 94 ]
initial
begin
	outAes_expected[94] = 1'bX;
end 
// expected outAes[ 93 ]
initial
begin
	outAes_expected[93] = 1'bX;
end 
// expected outAes[ 92 ]
initial
begin
	outAes_expected[92] = 1'bX;
end 
// expected outAes[ 91 ]
initial
begin
	outAes_expected[91] = 1'bX;
end 
// expected outAes[ 90 ]
initial
begin
	outAes_expected[90] = 1'bX;
end 
// expected outAes[ 89 ]
initial
begin
	outAes_expected[89] = 1'bX;
end 
// expected outAes[ 88 ]
initial
begin
	outAes_expected[88] = 1'bX;
end 
// expected outAes[ 87 ]
initial
begin
	outAes_expected[87] = 1'bX;
end 
// expected outAes[ 86 ]
initial
begin
	outAes_expected[86] = 1'bX;
end 
// expected outAes[ 85 ]
initial
begin
	outAes_expected[85] = 1'bX;
end 
// expected outAes[ 84 ]
initial
begin
	outAes_expected[84] = 1'bX;
end 
// expected outAes[ 83 ]
initial
begin
	outAes_expected[83] = 1'bX;
end 
// expected outAes[ 82 ]
initial
begin
	outAes_expected[82] = 1'bX;
end 
// expected outAes[ 81 ]
initial
begin
	outAes_expected[81] = 1'bX;
end 
// expected outAes[ 80 ]
initial
begin
	outAes_expected[80] = 1'bX;
end 
// expected outAes[ 79 ]
initial
begin
	outAes_expected[79] = 1'bX;
end 
// expected outAes[ 78 ]
initial
begin
	outAes_expected[78] = 1'bX;
end 
// expected outAes[ 77 ]
initial
begin
	outAes_expected[77] = 1'bX;
end 
// expected outAes[ 76 ]
initial
begin
	outAes_expected[76] = 1'bX;
end 
// expected outAes[ 75 ]
initial
begin
	outAes_expected[75] = 1'bX;
end 
// expected outAes[ 74 ]
initial
begin
	outAes_expected[74] = 1'bX;
end 
// expected outAes[ 73 ]
initial
begin
	outAes_expected[73] = 1'bX;
end 
// expected outAes[ 72 ]
initial
begin
	outAes_expected[72] = 1'bX;
end 
// expected outAes[ 71 ]
initial
begin
	outAes_expected[71] = 1'bX;
end 
// expected outAes[ 70 ]
initial
begin
	outAes_expected[70] = 1'bX;
end 
// expected outAes[ 69 ]
initial
begin
	outAes_expected[69] = 1'bX;
end 
// expected outAes[ 68 ]
initial
begin
	outAes_expected[68] = 1'bX;
end 
// expected outAes[ 67 ]
initial
begin
	outAes_expected[67] = 1'bX;
end 
// expected outAes[ 66 ]
initial
begin
	outAes_expected[66] = 1'bX;
end 
// expected outAes[ 65 ]
initial
begin
	outAes_expected[65] = 1'bX;
end 
// expected outAes[ 64 ]
initial
begin
	outAes_expected[64] = 1'bX;
end 
// expected outAes[ 63 ]
initial
begin
	outAes_expected[63] = 1'bX;
end 
// expected outAes[ 62 ]
initial
begin
	outAes_expected[62] = 1'bX;
end 
// expected outAes[ 61 ]
initial
begin
	outAes_expected[61] = 1'bX;
end 
// expected outAes[ 60 ]
initial
begin
	outAes_expected[60] = 1'bX;
end 
// expected outAes[ 59 ]
initial
begin
	outAes_expected[59] = 1'bX;
end 
// expected outAes[ 58 ]
initial
begin
	outAes_expected[58] = 1'bX;
end 
// expected outAes[ 57 ]
initial
begin
	outAes_expected[57] = 1'bX;
end 
// expected outAes[ 56 ]
initial
begin
	outAes_expected[56] = 1'bX;
end 
// expected outAes[ 55 ]
initial
begin
	outAes_expected[55] = 1'bX;
end 
// expected outAes[ 54 ]
initial
begin
	outAes_expected[54] = 1'bX;
end 
// expected outAes[ 53 ]
initial
begin
	outAes_expected[53] = 1'bX;
end 
// expected outAes[ 52 ]
initial
begin
	outAes_expected[52] = 1'bX;
end 
// expected outAes[ 51 ]
initial
begin
	outAes_expected[51] = 1'bX;
end 
// expected outAes[ 50 ]
initial
begin
	outAes_expected[50] = 1'bX;
end 
// expected outAes[ 49 ]
initial
begin
	outAes_expected[49] = 1'bX;
end 
// expected outAes[ 48 ]
initial
begin
	outAes_expected[48] = 1'bX;
end 
// expected outAes[ 47 ]
initial
begin
	outAes_expected[47] = 1'bX;
end 
// expected outAes[ 46 ]
initial
begin
	outAes_expected[46] = 1'bX;
end 
// expected outAes[ 45 ]
initial
begin
	outAes_expected[45] = 1'bX;
end 
// expected outAes[ 44 ]
initial
begin
	outAes_expected[44] = 1'bX;
end 
// expected outAes[ 43 ]
initial
begin
	outAes_expected[43] = 1'bX;
end 
// expected outAes[ 42 ]
initial
begin
	outAes_expected[42] = 1'bX;
end 
// expected outAes[ 41 ]
initial
begin
	outAes_expected[41] = 1'bX;
end 
// expected outAes[ 40 ]
initial
begin
	outAes_expected[40] = 1'bX;
end 
// expected outAes[ 39 ]
initial
begin
	outAes_expected[39] = 1'bX;
end 
// expected outAes[ 38 ]
initial
begin
	outAes_expected[38] = 1'bX;
end 
// expected outAes[ 37 ]
initial
begin
	outAes_expected[37] = 1'bX;
end 
// expected outAes[ 36 ]
initial
begin
	outAes_expected[36] = 1'bX;
end 
// expected outAes[ 35 ]
initial
begin
	outAes_expected[35] = 1'bX;
end 
// expected outAes[ 34 ]
initial
begin
	outAes_expected[34] = 1'bX;
end 
// expected outAes[ 33 ]
initial
begin
	outAes_expected[33] = 1'bX;
end 
// expected outAes[ 32 ]
initial
begin
	outAes_expected[32] = 1'bX;
end 
// expected outAes[ 31 ]
initial
begin
	outAes_expected[31] = 1'bX;
end 
// expected outAes[ 30 ]
initial
begin
	outAes_expected[30] = 1'bX;
end 
// expected outAes[ 29 ]
initial
begin
	outAes_expected[29] = 1'bX;
end 
// expected outAes[ 28 ]
initial
begin
	outAes_expected[28] = 1'bX;
end 
// expected outAes[ 27 ]
initial
begin
	outAes_expected[27] = 1'bX;
end 
// expected outAes[ 26 ]
initial
begin
	outAes_expected[26] = 1'bX;
end 
// expected outAes[ 25 ]
initial
begin
	outAes_expected[25] = 1'bX;
end 
// expected outAes[ 24 ]
initial
begin
	outAes_expected[24] = 1'bX;
end 
// expected outAes[ 23 ]
initial
begin
	outAes_expected[23] = 1'bX;
end 
// expected outAes[ 22 ]
initial
begin
	outAes_expected[22] = 1'bX;
end 
// expected outAes[ 21 ]
initial
begin
	outAes_expected[21] = 1'bX;
end 
// expected outAes[ 20 ]
initial
begin
	outAes_expected[20] = 1'bX;
end 
// expected outAes[ 19 ]
initial
begin
	outAes_expected[19] = 1'bX;
end 
// expected outAes[ 18 ]
initial
begin
	outAes_expected[18] = 1'bX;
end 
// expected outAes[ 17 ]
initial
begin
	outAes_expected[17] = 1'bX;
end 
// expected outAes[ 16 ]
initial
begin
	outAes_expected[16] = 1'bX;
end 
// expected outAes[ 15 ]
initial
begin
	outAes_expected[15] = 1'bX;
end 
// expected outAes[ 14 ]
initial
begin
	outAes_expected[14] = 1'bX;
end 
// expected outAes[ 13 ]
initial
begin
	outAes_expected[13] = 1'bX;
end 
// expected outAes[ 12 ]
initial
begin
	outAes_expected[12] = 1'bX;
end 
// expected outAes[ 11 ]
initial
begin
	outAes_expected[11] = 1'bX;
end 
// expected outAes[ 10 ]
initial
begin
	outAes_expected[10] = 1'bX;
end 
// expected outAes[ 9 ]
initial
begin
	outAes_expected[9] = 1'bX;
end 
// expected outAes[ 8 ]
initial
begin
	outAes_expected[8] = 1'bX;
end 
// expected outAes[ 7 ]
initial
begin
	outAes_expected[7] = 1'bX;
end 
// expected outAes[ 6 ]
initial
begin
	outAes_expected[6] = 1'bX;
end 
// expected outAes[ 5 ]
initial
begin
	outAes_expected[5] = 1'bX;
end 
// expected outAes[ 4 ]
initial
begin
	outAes_expected[4] = 1'bX;
end 
// expected outAes[ 3 ]
initial
begin
	outAes_expected[3] = 1'bX;
end 
// expected outAes[ 2 ]
initial
begin
	outAes_expected[2] = 1'bX;
end 
// expected outAes[ 1 ]
initial
begin
	outAes_expected[1] = 1'bX;
end 
// expected outAes[ 0 ]
initial
begin
	outAes_expected[0] = 1'bX;
end 
// generate trigger
always @(outAes_expected or outAes)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outAes = %b | ",outAes_expected_prev);
	$display("| real outAes = %b | ",outAes_prev);
`endif
	if (
		( outAes_expected_prev[0] !== 1'bx ) && ( outAes_prev[0] !== outAes_expected_prev[0] )
		&& ((outAes_expected_prev[0] !== last_outAes_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[0] = outAes_expected_prev[0];
	end
	if (
		( outAes_expected_prev[1] !== 1'bx ) && ( outAes_prev[1] !== outAes_expected_prev[1] )
		&& ((outAes_expected_prev[1] !== last_outAes_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[1] = outAes_expected_prev[1];
	end
	if (
		( outAes_expected_prev[2] !== 1'bx ) && ( outAes_prev[2] !== outAes_expected_prev[2] )
		&& ((outAes_expected_prev[2] !== last_outAes_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[2] = outAes_expected_prev[2];
	end
	if (
		( outAes_expected_prev[3] !== 1'bx ) && ( outAes_prev[3] !== outAes_expected_prev[3] )
		&& ((outAes_expected_prev[3] !== last_outAes_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[3] = outAes_expected_prev[3];
	end
	if (
		( outAes_expected_prev[4] !== 1'bx ) && ( outAes_prev[4] !== outAes_expected_prev[4] )
		&& ((outAes_expected_prev[4] !== last_outAes_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[4] = outAes_expected_prev[4];
	end
	if (
		( outAes_expected_prev[5] !== 1'bx ) && ( outAes_prev[5] !== outAes_expected_prev[5] )
		&& ((outAes_expected_prev[5] !== last_outAes_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[5] = outAes_expected_prev[5];
	end
	if (
		( outAes_expected_prev[6] !== 1'bx ) && ( outAes_prev[6] !== outAes_expected_prev[6] )
		&& ((outAes_expected_prev[6] !== last_outAes_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[6] = outAes_expected_prev[6];
	end
	if (
		( outAes_expected_prev[7] !== 1'bx ) && ( outAes_prev[7] !== outAes_expected_prev[7] )
		&& ((outAes_expected_prev[7] !== last_outAes_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[7] = outAes_expected_prev[7];
	end
	if (
		( outAes_expected_prev[8] !== 1'bx ) && ( outAes_prev[8] !== outAes_expected_prev[8] )
		&& ((outAes_expected_prev[8] !== last_outAes_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[8] = outAes_expected_prev[8];
	end
	if (
		( outAes_expected_prev[9] !== 1'bx ) && ( outAes_prev[9] !== outAes_expected_prev[9] )
		&& ((outAes_expected_prev[9] !== last_outAes_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[9] = outAes_expected_prev[9];
	end
	if (
		( outAes_expected_prev[10] !== 1'bx ) && ( outAes_prev[10] !== outAes_expected_prev[10] )
		&& ((outAes_expected_prev[10] !== last_outAes_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[10] = outAes_expected_prev[10];
	end
	if (
		( outAes_expected_prev[11] !== 1'bx ) && ( outAes_prev[11] !== outAes_expected_prev[11] )
		&& ((outAes_expected_prev[11] !== last_outAes_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[11] = outAes_expected_prev[11];
	end
	if (
		( outAes_expected_prev[12] !== 1'bx ) && ( outAes_prev[12] !== outAes_expected_prev[12] )
		&& ((outAes_expected_prev[12] !== last_outAes_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[12] = outAes_expected_prev[12];
	end
	if (
		( outAes_expected_prev[13] !== 1'bx ) && ( outAes_prev[13] !== outAes_expected_prev[13] )
		&& ((outAes_expected_prev[13] !== last_outAes_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[13] = outAes_expected_prev[13];
	end
	if (
		( outAes_expected_prev[14] !== 1'bx ) && ( outAes_prev[14] !== outAes_expected_prev[14] )
		&& ((outAes_expected_prev[14] !== last_outAes_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[14] = outAes_expected_prev[14];
	end
	if (
		( outAes_expected_prev[15] !== 1'bx ) && ( outAes_prev[15] !== outAes_expected_prev[15] )
		&& ((outAes_expected_prev[15] !== last_outAes_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[15] = outAes_expected_prev[15];
	end
	if (
		( outAes_expected_prev[16] !== 1'bx ) && ( outAes_prev[16] !== outAes_expected_prev[16] )
		&& ((outAes_expected_prev[16] !== last_outAes_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[16] = outAes_expected_prev[16];
	end
	if (
		( outAes_expected_prev[17] !== 1'bx ) && ( outAes_prev[17] !== outAes_expected_prev[17] )
		&& ((outAes_expected_prev[17] !== last_outAes_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[17] = outAes_expected_prev[17];
	end
	if (
		( outAes_expected_prev[18] !== 1'bx ) && ( outAes_prev[18] !== outAes_expected_prev[18] )
		&& ((outAes_expected_prev[18] !== last_outAes_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[18] = outAes_expected_prev[18];
	end
	if (
		( outAes_expected_prev[19] !== 1'bx ) && ( outAes_prev[19] !== outAes_expected_prev[19] )
		&& ((outAes_expected_prev[19] !== last_outAes_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[19] = outAes_expected_prev[19];
	end
	if (
		( outAes_expected_prev[20] !== 1'bx ) && ( outAes_prev[20] !== outAes_expected_prev[20] )
		&& ((outAes_expected_prev[20] !== last_outAes_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[20] = outAes_expected_prev[20];
	end
	if (
		( outAes_expected_prev[21] !== 1'bx ) && ( outAes_prev[21] !== outAes_expected_prev[21] )
		&& ((outAes_expected_prev[21] !== last_outAes_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[21] = outAes_expected_prev[21];
	end
	if (
		( outAes_expected_prev[22] !== 1'bx ) && ( outAes_prev[22] !== outAes_expected_prev[22] )
		&& ((outAes_expected_prev[22] !== last_outAes_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[22] = outAes_expected_prev[22];
	end
	if (
		( outAes_expected_prev[23] !== 1'bx ) && ( outAes_prev[23] !== outAes_expected_prev[23] )
		&& ((outAes_expected_prev[23] !== last_outAes_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[23] = outAes_expected_prev[23];
	end
	if (
		( outAes_expected_prev[24] !== 1'bx ) && ( outAes_prev[24] !== outAes_expected_prev[24] )
		&& ((outAes_expected_prev[24] !== last_outAes_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[24] = outAes_expected_prev[24];
	end
	if (
		( outAes_expected_prev[25] !== 1'bx ) && ( outAes_prev[25] !== outAes_expected_prev[25] )
		&& ((outAes_expected_prev[25] !== last_outAes_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[25] = outAes_expected_prev[25];
	end
	if (
		( outAes_expected_prev[26] !== 1'bx ) && ( outAes_prev[26] !== outAes_expected_prev[26] )
		&& ((outAes_expected_prev[26] !== last_outAes_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[26] = outAes_expected_prev[26];
	end
	if (
		( outAes_expected_prev[27] !== 1'bx ) && ( outAes_prev[27] !== outAes_expected_prev[27] )
		&& ((outAes_expected_prev[27] !== last_outAes_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[27] = outAes_expected_prev[27];
	end
	if (
		( outAes_expected_prev[28] !== 1'bx ) && ( outAes_prev[28] !== outAes_expected_prev[28] )
		&& ((outAes_expected_prev[28] !== last_outAes_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[28] = outAes_expected_prev[28];
	end
	if (
		( outAes_expected_prev[29] !== 1'bx ) && ( outAes_prev[29] !== outAes_expected_prev[29] )
		&& ((outAes_expected_prev[29] !== last_outAes_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[29] = outAes_expected_prev[29];
	end
	if (
		( outAes_expected_prev[30] !== 1'bx ) && ( outAes_prev[30] !== outAes_expected_prev[30] )
		&& ((outAes_expected_prev[30] !== last_outAes_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[30] = outAes_expected_prev[30];
	end
	if (
		( outAes_expected_prev[31] !== 1'bx ) && ( outAes_prev[31] !== outAes_expected_prev[31] )
		&& ((outAes_expected_prev[31] !== last_outAes_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[31] = outAes_expected_prev[31];
	end
	if (
		( outAes_expected_prev[32] !== 1'bx ) && ( outAes_prev[32] !== outAes_expected_prev[32] )
		&& ((outAes_expected_prev[32] !== last_outAes_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[32] = outAes_expected_prev[32];
	end
	if (
		( outAes_expected_prev[33] !== 1'bx ) && ( outAes_prev[33] !== outAes_expected_prev[33] )
		&& ((outAes_expected_prev[33] !== last_outAes_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[33] = outAes_expected_prev[33];
	end
	if (
		( outAes_expected_prev[34] !== 1'bx ) && ( outAes_prev[34] !== outAes_expected_prev[34] )
		&& ((outAes_expected_prev[34] !== last_outAes_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[34] = outAes_expected_prev[34];
	end
	if (
		( outAes_expected_prev[35] !== 1'bx ) && ( outAes_prev[35] !== outAes_expected_prev[35] )
		&& ((outAes_expected_prev[35] !== last_outAes_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[35] = outAes_expected_prev[35];
	end
	if (
		( outAes_expected_prev[36] !== 1'bx ) && ( outAes_prev[36] !== outAes_expected_prev[36] )
		&& ((outAes_expected_prev[36] !== last_outAes_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[36] = outAes_expected_prev[36];
	end
	if (
		( outAes_expected_prev[37] !== 1'bx ) && ( outAes_prev[37] !== outAes_expected_prev[37] )
		&& ((outAes_expected_prev[37] !== last_outAes_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[37] = outAes_expected_prev[37];
	end
	if (
		( outAes_expected_prev[38] !== 1'bx ) && ( outAes_prev[38] !== outAes_expected_prev[38] )
		&& ((outAes_expected_prev[38] !== last_outAes_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[38] = outAes_expected_prev[38];
	end
	if (
		( outAes_expected_prev[39] !== 1'bx ) && ( outAes_prev[39] !== outAes_expected_prev[39] )
		&& ((outAes_expected_prev[39] !== last_outAes_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[39] = outAes_expected_prev[39];
	end
	if (
		( outAes_expected_prev[40] !== 1'bx ) && ( outAes_prev[40] !== outAes_expected_prev[40] )
		&& ((outAes_expected_prev[40] !== last_outAes_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[40] = outAes_expected_prev[40];
	end
	if (
		( outAes_expected_prev[41] !== 1'bx ) && ( outAes_prev[41] !== outAes_expected_prev[41] )
		&& ((outAes_expected_prev[41] !== last_outAes_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[41] = outAes_expected_prev[41];
	end
	if (
		( outAes_expected_prev[42] !== 1'bx ) && ( outAes_prev[42] !== outAes_expected_prev[42] )
		&& ((outAes_expected_prev[42] !== last_outAes_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[42] = outAes_expected_prev[42];
	end
	if (
		( outAes_expected_prev[43] !== 1'bx ) && ( outAes_prev[43] !== outAes_expected_prev[43] )
		&& ((outAes_expected_prev[43] !== last_outAes_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[43] = outAes_expected_prev[43];
	end
	if (
		( outAes_expected_prev[44] !== 1'bx ) && ( outAes_prev[44] !== outAes_expected_prev[44] )
		&& ((outAes_expected_prev[44] !== last_outAes_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[44] = outAes_expected_prev[44];
	end
	if (
		( outAes_expected_prev[45] !== 1'bx ) && ( outAes_prev[45] !== outAes_expected_prev[45] )
		&& ((outAes_expected_prev[45] !== last_outAes_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[45] = outAes_expected_prev[45];
	end
	if (
		( outAes_expected_prev[46] !== 1'bx ) && ( outAes_prev[46] !== outAes_expected_prev[46] )
		&& ((outAes_expected_prev[46] !== last_outAes_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[46] = outAes_expected_prev[46];
	end
	if (
		( outAes_expected_prev[47] !== 1'bx ) && ( outAes_prev[47] !== outAes_expected_prev[47] )
		&& ((outAes_expected_prev[47] !== last_outAes_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[47] = outAes_expected_prev[47];
	end
	if (
		( outAes_expected_prev[48] !== 1'bx ) && ( outAes_prev[48] !== outAes_expected_prev[48] )
		&& ((outAes_expected_prev[48] !== last_outAes_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[48] = outAes_expected_prev[48];
	end
	if (
		( outAes_expected_prev[49] !== 1'bx ) && ( outAes_prev[49] !== outAes_expected_prev[49] )
		&& ((outAes_expected_prev[49] !== last_outAes_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[49] = outAes_expected_prev[49];
	end
	if (
		( outAes_expected_prev[50] !== 1'bx ) && ( outAes_prev[50] !== outAes_expected_prev[50] )
		&& ((outAes_expected_prev[50] !== last_outAes_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[50] = outAes_expected_prev[50];
	end
	if (
		( outAes_expected_prev[51] !== 1'bx ) && ( outAes_prev[51] !== outAes_expected_prev[51] )
		&& ((outAes_expected_prev[51] !== last_outAes_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[51] = outAes_expected_prev[51];
	end
	if (
		( outAes_expected_prev[52] !== 1'bx ) && ( outAes_prev[52] !== outAes_expected_prev[52] )
		&& ((outAes_expected_prev[52] !== last_outAes_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[52] = outAes_expected_prev[52];
	end
	if (
		( outAes_expected_prev[53] !== 1'bx ) && ( outAes_prev[53] !== outAes_expected_prev[53] )
		&& ((outAes_expected_prev[53] !== last_outAes_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[53] = outAes_expected_prev[53];
	end
	if (
		( outAes_expected_prev[54] !== 1'bx ) && ( outAes_prev[54] !== outAes_expected_prev[54] )
		&& ((outAes_expected_prev[54] !== last_outAes_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[54] = outAes_expected_prev[54];
	end
	if (
		( outAes_expected_prev[55] !== 1'bx ) && ( outAes_prev[55] !== outAes_expected_prev[55] )
		&& ((outAes_expected_prev[55] !== last_outAes_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[55] = outAes_expected_prev[55];
	end
	if (
		( outAes_expected_prev[56] !== 1'bx ) && ( outAes_prev[56] !== outAes_expected_prev[56] )
		&& ((outAes_expected_prev[56] !== last_outAes_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[56] = outAes_expected_prev[56];
	end
	if (
		( outAes_expected_prev[57] !== 1'bx ) && ( outAes_prev[57] !== outAes_expected_prev[57] )
		&& ((outAes_expected_prev[57] !== last_outAes_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[57] = outAes_expected_prev[57];
	end
	if (
		( outAes_expected_prev[58] !== 1'bx ) && ( outAes_prev[58] !== outAes_expected_prev[58] )
		&& ((outAes_expected_prev[58] !== last_outAes_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[58] = outAes_expected_prev[58];
	end
	if (
		( outAes_expected_prev[59] !== 1'bx ) && ( outAes_prev[59] !== outAes_expected_prev[59] )
		&& ((outAes_expected_prev[59] !== last_outAes_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[59] = outAes_expected_prev[59];
	end
	if (
		( outAes_expected_prev[60] !== 1'bx ) && ( outAes_prev[60] !== outAes_expected_prev[60] )
		&& ((outAes_expected_prev[60] !== last_outAes_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[60] = outAes_expected_prev[60];
	end
	if (
		( outAes_expected_prev[61] !== 1'bx ) && ( outAes_prev[61] !== outAes_expected_prev[61] )
		&& ((outAes_expected_prev[61] !== last_outAes_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[61] = outAes_expected_prev[61];
	end
	if (
		( outAes_expected_prev[62] !== 1'bx ) && ( outAes_prev[62] !== outAes_expected_prev[62] )
		&& ((outAes_expected_prev[62] !== last_outAes_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[62] = outAes_expected_prev[62];
	end
	if (
		( outAes_expected_prev[63] !== 1'bx ) && ( outAes_prev[63] !== outAes_expected_prev[63] )
		&& ((outAes_expected_prev[63] !== last_outAes_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[63] = outAes_expected_prev[63];
	end
	if (
		( outAes_expected_prev[64] !== 1'bx ) && ( outAes_prev[64] !== outAes_expected_prev[64] )
		&& ((outAes_expected_prev[64] !== last_outAes_exp[64]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[64] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[64] = outAes_expected_prev[64];
	end
	if (
		( outAes_expected_prev[65] !== 1'bx ) && ( outAes_prev[65] !== outAes_expected_prev[65] )
		&& ((outAes_expected_prev[65] !== last_outAes_exp[65]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[65] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[65] = outAes_expected_prev[65];
	end
	if (
		( outAes_expected_prev[66] !== 1'bx ) && ( outAes_prev[66] !== outAes_expected_prev[66] )
		&& ((outAes_expected_prev[66] !== last_outAes_exp[66]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[66] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[66] = outAes_expected_prev[66];
	end
	if (
		( outAes_expected_prev[67] !== 1'bx ) && ( outAes_prev[67] !== outAes_expected_prev[67] )
		&& ((outAes_expected_prev[67] !== last_outAes_exp[67]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[67] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[67] = outAes_expected_prev[67];
	end
	if (
		( outAes_expected_prev[68] !== 1'bx ) && ( outAes_prev[68] !== outAes_expected_prev[68] )
		&& ((outAes_expected_prev[68] !== last_outAes_exp[68]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[68] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[68] = outAes_expected_prev[68];
	end
	if (
		( outAes_expected_prev[69] !== 1'bx ) && ( outAes_prev[69] !== outAes_expected_prev[69] )
		&& ((outAes_expected_prev[69] !== last_outAes_exp[69]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[69] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[69] = outAes_expected_prev[69];
	end
	if (
		( outAes_expected_prev[70] !== 1'bx ) && ( outAes_prev[70] !== outAes_expected_prev[70] )
		&& ((outAes_expected_prev[70] !== last_outAes_exp[70]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[70] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[70] = outAes_expected_prev[70];
	end
	if (
		( outAes_expected_prev[71] !== 1'bx ) && ( outAes_prev[71] !== outAes_expected_prev[71] )
		&& ((outAes_expected_prev[71] !== last_outAes_exp[71]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[71] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[71] = outAes_expected_prev[71];
	end
	if (
		( outAes_expected_prev[72] !== 1'bx ) && ( outAes_prev[72] !== outAes_expected_prev[72] )
		&& ((outAes_expected_prev[72] !== last_outAes_exp[72]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[72] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[72] = outAes_expected_prev[72];
	end
	if (
		( outAes_expected_prev[73] !== 1'bx ) && ( outAes_prev[73] !== outAes_expected_prev[73] )
		&& ((outAes_expected_prev[73] !== last_outAes_exp[73]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[73] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[73] = outAes_expected_prev[73];
	end
	if (
		( outAes_expected_prev[74] !== 1'bx ) && ( outAes_prev[74] !== outAes_expected_prev[74] )
		&& ((outAes_expected_prev[74] !== last_outAes_exp[74]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[74] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[74] = outAes_expected_prev[74];
	end
	if (
		( outAes_expected_prev[75] !== 1'bx ) && ( outAes_prev[75] !== outAes_expected_prev[75] )
		&& ((outAes_expected_prev[75] !== last_outAes_exp[75]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[75] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[75] = outAes_expected_prev[75];
	end
	if (
		( outAes_expected_prev[76] !== 1'bx ) && ( outAes_prev[76] !== outAes_expected_prev[76] )
		&& ((outAes_expected_prev[76] !== last_outAes_exp[76]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[76] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[76] = outAes_expected_prev[76];
	end
	if (
		( outAes_expected_prev[77] !== 1'bx ) && ( outAes_prev[77] !== outAes_expected_prev[77] )
		&& ((outAes_expected_prev[77] !== last_outAes_exp[77]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[77] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[77] = outAes_expected_prev[77];
	end
	if (
		( outAes_expected_prev[78] !== 1'bx ) && ( outAes_prev[78] !== outAes_expected_prev[78] )
		&& ((outAes_expected_prev[78] !== last_outAes_exp[78]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[78] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[78] = outAes_expected_prev[78];
	end
	if (
		( outAes_expected_prev[79] !== 1'bx ) && ( outAes_prev[79] !== outAes_expected_prev[79] )
		&& ((outAes_expected_prev[79] !== last_outAes_exp[79]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[79] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[79] = outAes_expected_prev[79];
	end
	if (
		( outAes_expected_prev[80] !== 1'bx ) && ( outAes_prev[80] !== outAes_expected_prev[80] )
		&& ((outAes_expected_prev[80] !== last_outAes_exp[80]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[80] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[80] = outAes_expected_prev[80];
	end
	if (
		( outAes_expected_prev[81] !== 1'bx ) && ( outAes_prev[81] !== outAes_expected_prev[81] )
		&& ((outAes_expected_prev[81] !== last_outAes_exp[81]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[81] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[81] = outAes_expected_prev[81];
	end
	if (
		( outAes_expected_prev[82] !== 1'bx ) && ( outAes_prev[82] !== outAes_expected_prev[82] )
		&& ((outAes_expected_prev[82] !== last_outAes_exp[82]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[82] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[82] = outAes_expected_prev[82];
	end
	if (
		( outAes_expected_prev[83] !== 1'bx ) && ( outAes_prev[83] !== outAes_expected_prev[83] )
		&& ((outAes_expected_prev[83] !== last_outAes_exp[83]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[83] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[83] = outAes_expected_prev[83];
	end
	if (
		( outAes_expected_prev[84] !== 1'bx ) && ( outAes_prev[84] !== outAes_expected_prev[84] )
		&& ((outAes_expected_prev[84] !== last_outAes_exp[84]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[84] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[84] = outAes_expected_prev[84];
	end
	if (
		( outAes_expected_prev[85] !== 1'bx ) && ( outAes_prev[85] !== outAes_expected_prev[85] )
		&& ((outAes_expected_prev[85] !== last_outAes_exp[85]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[85] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[85] = outAes_expected_prev[85];
	end
	if (
		( outAes_expected_prev[86] !== 1'bx ) && ( outAes_prev[86] !== outAes_expected_prev[86] )
		&& ((outAes_expected_prev[86] !== last_outAes_exp[86]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[86] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[86] = outAes_expected_prev[86];
	end
	if (
		( outAes_expected_prev[87] !== 1'bx ) && ( outAes_prev[87] !== outAes_expected_prev[87] )
		&& ((outAes_expected_prev[87] !== last_outAes_exp[87]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[87] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[87] = outAes_expected_prev[87];
	end
	if (
		( outAes_expected_prev[88] !== 1'bx ) && ( outAes_prev[88] !== outAes_expected_prev[88] )
		&& ((outAes_expected_prev[88] !== last_outAes_exp[88]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[88] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[88] = outAes_expected_prev[88];
	end
	if (
		( outAes_expected_prev[89] !== 1'bx ) && ( outAes_prev[89] !== outAes_expected_prev[89] )
		&& ((outAes_expected_prev[89] !== last_outAes_exp[89]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[89] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[89] = outAes_expected_prev[89];
	end
	if (
		( outAes_expected_prev[90] !== 1'bx ) && ( outAes_prev[90] !== outAes_expected_prev[90] )
		&& ((outAes_expected_prev[90] !== last_outAes_exp[90]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[90] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[90] = outAes_expected_prev[90];
	end
	if (
		( outAes_expected_prev[91] !== 1'bx ) && ( outAes_prev[91] !== outAes_expected_prev[91] )
		&& ((outAes_expected_prev[91] !== last_outAes_exp[91]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[91] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[91] = outAes_expected_prev[91];
	end
	if (
		( outAes_expected_prev[92] !== 1'bx ) && ( outAes_prev[92] !== outAes_expected_prev[92] )
		&& ((outAes_expected_prev[92] !== last_outAes_exp[92]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[92] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[92] = outAes_expected_prev[92];
	end
	if (
		( outAes_expected_prev[93] !== 1'bx ) && ( outAes_prev[93] !== outAes_expected_prev[93] )
		&& ((outAes_expected_prev[93] !== last_outAes_exp[93]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[93] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[93] = outAes_expected_prev[93];
	end
	if (
		( outAes_expected_prev[94] !== 1'bx ) && ( outAes_prev[94] !== outAes_expected_prev[94] )
		&& ((outAes_expected_prev[94] !== last_outAes_exp[94]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[94] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[94] = outAes_expected_prev[94];
	end
	if (
		( outAes_expected_prev[95] !== 1'bx ) && ( outAes_prev[95] !== outAes_expected_prev[95] )
		&& ((outAes_expected_prev[95] !== last_outAes_exp[95]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[95] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[95] = outAes_expected_prev[95];
	end
	if (
		( outAes_expected_prev[96] !== 1'bx ) && ( outAes_prev[96] !== outAes_expected_prev[96] )
		&& ((outAes_expected_prev[96] !== last_outAes_exp[96]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[96] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[96] = outAes_expected_prev[96];
	end
	if (
		( outAes_expected_prev[97] !== 1'bx ) && ( outAes_prev[97] !== outAes_expected_prev[97] )
		&& ((outAes_expected_prev[97] !== last_outAes_exp[97]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[97] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[97] = outAes_expected_prev[97];
	end
	if (
		( outAes_expected_prev[98] !== 1'bx ) && ( outAes_prev[98] !== outAes_expected_prev[98] )
		&& ((outAes_expected_prev[98] !== last_outAes_exp[98]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[98] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[98] = outAes_expected_prev[98];
	end
	if (
		( outAes_expected_prev[99] !== 1'bx ) && ( outAes_prev[99] !== outAes_expected_prev[99] )
		&& ((outAes_expected_prev[99] !== last_outAes_exp[99]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[99] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[99] = outAes_expected_prev[99];
	end
	if (
		( outAes_expected_prev[100] !== 1'bx ) && ( outAes_prev[100] !== outAes_expected_prev[100] )
		&& ((outAes_expected_prev[100] !== last_outAes_exp[100]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[100] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[100] = outAes_expected_prev[100];
	end
	if (
		( outAes_expected_prev[101] !== 1'bx ) && ( outAes_prev[101] !== outAes_expected_prev[101] )
		&& ((outAes_expected_prev[101] !== last_outAes_exp[101]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[101] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[101] = outAes_expected_prev[101];
	end
	if (
		( outAes_expected_prev[102] !== 1'bx ) && ( outAes_prev[102] !== outAes_expected_prev[102] )
		&& ((outAes_expected_prev[102] !== last_outAes_exp[102]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[102] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[102] = outAes_expected_prev[102];
	end
	if (
		( outAes_expected_prev[103] !== 1'bx ) && ( outAes_prev[103] !== outAes_expected_prev[103] )
		&& ((outAes_expected_prev[103] !== last_outAes_exp[103]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[103] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[103] = outAes_expected_prev[103];
	end
	if (
		( outAes_expected_prev[104] !== 1'bx ) && ( outAes_prev[104] !== outAes_expected_prev[104] )
		&& ((outAes_expected_prev[104] !== last_outAes_exp[104]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[104] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[104] = outAes_expected_prev[104];
	end
	if (
		( outAes_expected_prev[105] !== 1'bx ) && ( outAes_prev[105] !== outAes_expected_prev[105] )
		&& ((outAes_expected_prev[105] !== last_outAes_exp[105]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[105] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[105] = outAes_expected_prev[105];
	end
	if (
		( outAes_expected_prev[106] !== 1'bx ) && ( outAes_prev[106] !== outAes_expected_prev[106] )
		&& ((outAes_expected_prev[106] !== last_outAes_exp[106]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[106] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[106] = outAes_expected_prev[106];
	end
	if (
		( outAes_expected_prev[107] !== 1'bx ) && ( outAes_prev[107] !== outAes_expected_prev[107] )
		&& ((outAes_expected_prev[107] !== last_outAes_exp[107]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[107] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[107] = outAes_expected_prev[107];
	end
	if (
		( outAes_expected_prev[108] !== 1'bx ) && ( outAes_prev[108] !== outAes_expected_prev[108] )
		&& ((outAes_expected_prev[108] !== last_outAes_exp[108]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[108] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[108] = outAes_expected_prev[108];
	end
	if (
		( outAes_expected_prev[109] !== 1'bx ) && ( outAes_prev[109] !== outAes_expected_prev[109] )
		&& ((outAes_expected_prev[109] !== last_outAes_exp[109]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[109] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[109] = outAes_expected_prev[109];
	end
	if (
		( outAes_expected_prev[110] !== 1'bx ) && ( outAes_prev[110] !== outAes_expected_prev[110] )
		&& ((outAes_expected_prev[110] !== last_outAes_exp[110]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[110] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[110] = outAes_expected_prev[110];
	end
	if (
		( outAes_expected_prev[111] !== 1'bx ) && ( outAes_prev[111] !== outAes_expected_prev[111] )
		&& ((outAes_expected_prev[111] !== last_outAes_exp[111]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[111] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[111] = outAes_expected_prev[111];
	end
	if (
		( outAes_expected_prev[112] !== 1'bx ) && ( outAes_prev[112] !== outAes_expected_prev[112] )
		&& ((outAes_expected_prev[112] !== last_outAes_exp[112]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[112] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[112] = outAes_expected_prev[112];
	end
	if (
		( outAes_expected_prev[113] !== 1'bx ) && ( outAes_prev[113] !== outAes_expected_prev[113] )
		&& ((outAes_expected_prev[113] !== last_outAes_exp[113]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[113] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[113] = outAes_expected_prev[113];
	end
	if (
		( outAes_expected_prev[114] !== 1'bx ) && ( outAes_prev[114] !== outAes_expected_prev[114] )
		&& ((outAes_expected_prev[114] !== last_outAes_exp[114]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[114] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[114] = outAes_expected_prev[114];
	end
	if (
		( outAes_expected_prev[115] !== 1'bx ) && ( outAes_prev[115] !== outAes_expected_prev[115] )
		&& ((outAes_expected_prev[115] !== last_outAes_exp[115]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[115] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[115] = outAes_expected_prev[115];
	end
	if (
		( outAes_expected_prev[116] !== 1'bx ) && ( outAes_prev[116] !== outAes_expected_prev[116] )
		&& ((outAes_expected_prev[116] !== last_outAes_exp[116]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[116] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[116] = outAes_expected_prev[116];
	end
	if (
		( outAes_expected_prev[117] !== 1'bx ) && ( outAes_prev[117] !== outAes_expected_prev[117] )
		&& ((outAes_expected_prev[117] !== last_outAes_exp[117]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[117] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[117] = outAes_expected_prev[117];
	end
	if (
		( outAes_expected_prev[118] !== 1'bx ) && ( outAes_prev[118] !== outAes_expected_prev[118] )
		&& ((outAes_expected_prev[118] !== last_outAes_exp[118]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[118] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[118] = outAes_expected_prev[118];
	end
	if (
		( outAes_expected_prev[119] !== 1'bx ) && ( outAes_prev[119] !== outAes_expected_prev[119] )
		&& ((outAes_expected_prev[119] !== last_outAes_exp[119]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[119] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[119] = outAes_expected_prev[119];
	end
	if (
		( outAes_expected_prev[120] !== 1'bx ) && ( outAes_prev[120] !== outAes_expected_prev[120] )
		&& ((outAes_expected_prev[120] !== last_outAes_exp[120]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[120] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[120] = outAes_expected_prev[120];
	end
	if (
		( outAes_expected_prev[121] !== 1'bx ) && ( outAes_prev[121] !== outAes_expected_prev[121] )
		&& ((outAes_expected_prev[121] !== last_outAes_exp[121]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[121] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[121] = outAes_expected_prev[121];
	end
	if (
		( outAes_expected_prev[122] !== 1'bx ) && ( outAes_prev[122] !== outAes_expected_prev[122] )
		&& ((outAes_expected_prev[122] !== last_outAes_exp[122]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[122] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[122] = outAes_expected_prev[122];
	end
	if (
		( outAes_expected_prev[123] !== 1'bx ) && ( outAes_prev[123] !== outAes_expected_prev[123] )
		&& ((outAes_expected_prev[123] !== last_outAes_exp[123]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[123] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[123] = outAes_expected_prev[123];
	end
	if (
		( outAes_expected_prev[124] !== 1'bx ) && ( outAes_prev[124] !== outAes_expected_prev[124] )
		&& ((outAes_expected_prev[124] !== last_outAes_exp[124]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[124] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[124] = outAes_expected_prev[124];
	end
	if (
		( outAes_expected_prev[125] !== 1'bx ) && ( outAes_prev[125] !== outAes_expected_prev[125] )
		&& ((outAes_expected_prev[125] !== last_outAes_exp[125]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[125] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[125] = outAes_expected_prev[125];
	end
	if (
		( outAes_expected_prev[126] !== 1'bx ) && ( outAes_prev[126] !== outAes_expected_prev[126] )
		&& ((outAes_expected_prev[126] !== last_outAes_exp[126]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[126] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[126] = outAes_expected_prev[126];
	end
	if (
		( outAes_expected_prev[127] !== 1'bx ) && ( outAes_prev[127] !== outAes_expected_prev[127] )
		&& ((outAes_expected_prev[127] !== last_outAes_exp[127]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAes[127] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAes_expected_prev);
		$display ("     Real value = %b", outAes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAes_exp[127] = outAes_expected_prev[127];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module aes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [127:0] keyIni;
reg [127:0] plainText;
// wires                                               
wire [127:0] outAes;

wire sampler;                             

// assign statements (if any)                          
aes i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.keyIni(keyIni),
	.outAes(outAes),
	.plainText(plainText)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// keyIni[ 127 ]
initial
begin
	keyIni[127] = 1'b0;
end 
// keyIni[ 126 ]
initial
begin
	keyIni[126] = 1'b0;
end 
// keyIni[ 125 ]
initial
begin
	keyIni[125] = 1'b1;
end 
// keyIni[ 124 ]
initial
begin
	keyIni[124] = 1'b1;
end 
// keyIni[ 123 ]
initial
begin
	keyIni[123] = 1'b0;
end 
// keyIni[ 122 ]
initial
begin
	keyIni[122] = 1'b0;
end 
// keyIni[ 121 ]
initial
begin
	keyIni[121] = 1'b1;
end 
// keyIni[ 120 ]
initial
begin
	keyIni[120] = 1'b0;
end 
// keyIni[ 119 ]
initial
begin
	keyIni[119] = 1'b1;
end 
// keyIni[ 118 ]
initial
begin
	keyIni[118] = 1'b0;
end 
// keyIni[ 117 ]
initial
begin
	keyIni[117] = 1'b0;
end 
// keyIni[ 116 ]
initial
begin
	keyIni[116] = 1'b0;
end 
// keyIni[ 115 ]
initial
begin
	keyIni[115] = 1'b1;
end 
// keyIni[ 114 ]
initial
begin
	keyIni[114] = 1'b0;
end 
// keyIni[ 113 ]
initial
begin
	keyIni[113] = 1'b0;
end 
// keyIni[ 112 ]
initial
begin
	keyIni[112] = 1'b0;
end 
// keyIni[ 111 ]
initial
begin
	keyIni[111] = 1'b0;
end 
// keyIni[ 110 ]
initial
begin
	keyIni[110] = 1'b0;
end 
// keyIni[ 109 ]
initial
begin
	keyIni[109] = 1'b1;
end 
// keyIni[ 108 ]
initial
begin
	keyIni[108] = 1'b1;
end 
// keyIni[ 107 ]
initial
begin
	keyIni[107] = 1'b0;
end 
// keyIni[ 106 ]
initial
begin
	keyIni[106] = 1'b0;
end 
// keyIni[ 105 ]
initial
begin
	keyIni[105] = 1'b0;
end 
// keyIni[ 104 ]
initial
begin
	keyIni[104] = 1'b1;
end 
// keyIni[ 103 ]
initial
begin
	keyIni[103] = 1'b1;
end 
// keyIni[ 102 ]
initial
begin
	keyIni[102] = 1'b1;
end 
// keyIni[ 101 ]
initial
begin
	keyIni[101] = 1'b1;
end 
// keyIni[ 100 ]
initial
begin
	keyIni[100] = 1'b0;
end 
// keyIni[ 99 ]
initial
begin
	keyIni[99] = 1'b0;
end 
// keyIni[ 98 ]
initial
begin
	keyIni[98] = 1'b0;
end 
// keyIni[ 97 ]
initial
begin
	keyIni[97] = 1'b0;
end 
// keyIni[ 96 ]
initial
begin
	keyIni[96] = 1'b0;
end 
// keyIni[ 95 ]
initial
begin
	keyIni[95] = 1'b0;
end 
// keyIni[ 94 ]
initial
begin
	keyIni[94] = 1'b1;
end 
// keyIni[ 93 ]
initial
begin
	keyIni[93] = 1'b0;
end 
// keyIni[ 92 ]
initial
begin
	keyIni[92] = 1'b0;
end 
// keyIni[ 91 ]
initial
begin
	keyIni[91] = 1'b0;
end 
// keyIni[ 90 ]
initial
begin
	keyIni[90] = 1'b0;
end 
// keyIni[ 89 ]
initial
begin
	keyIni[89] = 1'b1;
end 
// keyIni[ 88 ]
initial
begin
	keyIni[88] = 1'b1;
end 
// keyIni[ 87 ]
initial
begin
	keyIni[87] = 1'b0;
end 
// keyIni[ 86 ]
initial
begin
	keyIni[86] = 1'b1;
end 
// keyIni[ 85 ]
initial
begin
	keyIni[85] = 1'b0;
end 
// keyIni[ 84 ]
initial
begin
	keyIni[84] = 1'b1;
end 
// keyIni[ 83 ]
initial
begin
	keyIni[83] = 1'b1;
end 
// keyIni[ 82 ]
initial
begin
	keyIni[82] = 1'b0;
end 
// keyIni[ 81 ]
initial
begin
	keyIni[81] = 1'b1;
end 
// keyIni[ 80 ]
initial
begin
	keyIni[80] = 1'b0;
end 
// keyIni[ 79 ]
initial
begin
	keyIni[79] = 1'b0;
end 
// keyIni[ 78 ]
initial
begin
	keyIni[78] = 1'b0;
end 
// keyIni[ 77 ]
initial
begin
	keyIni[77] = 1'b1;
end 
// keyIni[ 76 ]
initial
begin
	keyIni[76] = 1'b1;
end 
// keyIni[ 75 ]
initial
begin
	keyIni[75] = 1'b0;
end 
// keyIni[ 74 ]
initial
begin
	keyIni[74] = 1'b0;
end 
// keyIni[ 73 ]
initial
begin
	keyIni[73] = 1'b0;
end 
// keyIni[ 72 ]
initial
begin
	keyIni[72] = 1'b1;
end 
// keyIni[ 71 ]
initial
begin
	keyIni[71] = 1'b0;
end 
// keyIni[ 70 ]
initial
begin
	keyIni[70] = 1'b0;
end 
// keyIni[ 69 ]
initial
begin
	keyIni[69] = 1'b1;
end 
// keyIni[ 68 ]
initial
begin
	keyIni[68] = 1'b1;
end 
// keyIni[ 67 ]
initial
begin
	keyIni[67] = 1'b0;
end 
// keyIni[ 66 ]
initial
begin
	keyIni[66] = 1'b1;
end 
// keyIni[ 65 ]
initial
begin
	keyIni[65] = 1'b1;
end 
// keyIni[ 64 ]
initial
begin
	keyIni[64] = 1'b1;
end 
// keyIni[ 63 ]
initial
begin
	keyIni[63] = 1'b1;
end 
// keyIni[ 62 ]
initial
begin
	keyIni[62] = 1'b1;
end 
// keyIni[ 61 ]
initial
begin
	keyIni[61] = 1'b1;
end 
// keyIni[ 60 ]
initial
begin
	keyIni[60] = 1'b1;
end 
// keyIni[ 59 ]
initial
begin
	keyIni[59] = 1'b0;
end 
// keyIni[ 58 ]
initial
begin
	keyIni[58] = 1'b1;
end 
// keyIni[ 57 ]
initial
begin
	keyIni[57] = 1'b1;
end 
// keyIni[ 56 ]
initial
begin
	keyIni[56] = 1'b0;
end 
// keyIni[ 55 ]
initial
begin
	keyIni[55] = 1'b0;
end 
// keyIni[ 54 ]
initial
begin
	keyIni[54] = 1'b0;
end 
// keyIni[ 53 ]
initial
begin
	keyIni[53] = 1'b1;
end 
// keyIni[ 52 ]
initial
begin
	keyIni[52] = 1'b1;
end 
// keyIni[ 51 ]
initial
begin
	keyIni[51] = 1'b0;
end 
// keyIni[ 50 ]
initial
begin
	keyIni[50] = 1'b0;
end 
// keyIni[ 49 ]
initial
begin
	keyIni[49] = 1'b0;
end 
// keyIni[ 48 ]
initial
begin
	keyIni[48] = 1'b0;
end 
// keyIni[ 47 ]
initial
begin
	keyIni[47] = 1'b1;
end 
// keyIni[ 46 ]
initial
begin
	keyIni[46] = 1'b0;
end 
// keyIni[ 45 ]
initial
begin
	keyIni[45] = 1'b0;
end 
// keyIni[ 44 ]
initial
begin
	keyIni[44] = 1'b1;
end 
// keyIni[ 43 ]
initial
begin
	keyIni[43] = 1'b1;
end 
// keyIni[ 42 ]
initial
begin
	keyIni[42] = 1'b0;
end 
// keyIni[ 41 ]
initial
begin
	keyIni[41] = 1'b0;
end 
// keyIni[ 40 ]
initial
begin
	keyIni[40] = 1'b0;
end 
// keyIni[ 39 ]
initial
begin
	keyIni[39] = 1'b0;
end 
// keyIni[ 38 ]
initial
begin
	keyIni[38] = 1'b0;
end 
// keyIni[ 37 ]
initial
begin
	keyIni[37] = 1'b0;
end 
// keyIni[ 36 ]
initial
begin
	keyIni[36] = 1'b0;
end 
// keyIni[ 35 ]
initial
begin
	keyIni[35] = 1'b0;
end 
// keyIni[ 34 ]
initial
begin
	keyIni[34] = 1'b1;
end 
// keyIni[ 33 ]
initial
begin
	keyIni[33] = 1'b1;
end 
// keyIni[ 32 ]
initial
begin
	keyIni[32] = 1'b1;
end 
// keyIni[ 31 ]
initial
begin
	keyIni[31] = 1'b1;
end 
// keyIni[ 30 ]
initial
begin
	keyIni[30] = 1'b0;
end 
// keyIni[ 29 ]
initial
begin
	keyIni[29] = 1'b1;
end 
// keyIni[ 28 ]
initial
begin
	keyIni[28] = 1'b0;
end 
// keyIni[ 27 ]
initial
begin
	keyIni[27] = 1'b1;
end 
// keyIni[ 26 ]
initial
begin
	keyIni[26] = 1'b0;
end 
// keyIni[ 25 ]
initial
begin
	keyIni[25] = 1'b0;
end 
// keyIni[ 24 ]
initial
begin
	keyIni[24] = 1'b0;
end 
// keyIni[ 23 ]
initial
begin
	keyIni[23] = 1'b1;
end 
// keyIni[ 22 ]
initial
begin
	keyIni[22] = 1'b0;
end 
// keyIni[ 21 ]
initial
begin
	keyIni[21] = 1'b0;
end 
// keyIni[ 20 ]
initial
begin
	keyIni[20] = 1'b0;
end 
// keyIni[ 19 ]
initial
begin
	keyIni[19] = 1'b1;
end 
// keyIni[ 18 ]
initial
begin
	keyIni[18] = 1'b1;
end 
// keyIni[ 17 ]
initial
begin
	keyIni[17] = 1'b0;
end 
// keyIni[ 16 ]
initial
begin
	keyIni[16] = 1'b1;
end 
// keyIni[ 15 ]
initial
begin
	keyIni[15] = 1'b1;
end 
// keyIni[ 14 ]
initial
begin
	keyIni[14] = 1'b0;
end 
// keyIni[ 13 ]
initial
begin
	keyIni[13] = 1'b1;
end 
// keyIni[ 12 ]
initial
begin
	keyIni[12] = 1'b0;
end 
// keyIni[ 11 ]
initial
begin
	keyIni[11] = 1'b0;
end 
// keyIni[ 10 ]
initial
begin
	keyIni[10] = 1'b0;
end 
// keyIni[ 9 ]
initial
begin
	keyIni[9] = 1'b1;
end 
// keyIni[ 8 ]
initial
begin
	keyIni[8] = 1'b0;
end 
// keyIni[ 7 ]
initial
begin
	keyIni[7] = 1'b0;
end 
// keyIni[ 6 ]
initial
begin
	keyIni[6] = 1'b0;
end 
// keyIni[ 5 ]
initial
begin
	keyIni[5] = 1'b1;
end 
// keyIni[ 4 ]
initial
begin
	keyIni[4] = 1'b1;
end 
// keyIni[ 3 ]
initial
begin
	keyIni[3] = 1'b0;
end 
// keyIni[ 2 ]
initial
begin
	keyIni[2] = 1'b1;
end 
// keyIni[ 1 ]
initial
begin
	keyIni[1] = 1'b0;
end 
// keyIni[ 0 ]
initial
begin
	keyIni[0] = 1'b0;
end 
// plainText[ 127 ]
initial
begin
	plainText[127] = 1'b0;
end 
// plainText[ 126 ]
initial
begin
	plainText[126] = 1'b0;
end 
// plainText[ 125 ]
initial
begin
	plainText[125] = 1'b1;
end 
// plainText[ 124 ]
initial
begin
	plainText[124] = 1'b0;
end 
// plainText[ 123 ]
initial
begin
	plainText[123] = 1'b1;
end 
// plainText[ 122 ]
initial
begin
	plainText[122] = 1'b0;
end 
// plainText[ 121 ]
initial
begin
	plainText[121] = 1'b1;
end 
// plainText[ 120 ]
initial
begin
	plainText[120] = 1'b1;
end 
// plainText[ 119 ]
initial
begin
	plainText[119] = 1'b0;
end 
// plainText[ 118 ]
initial
begin
	plainText[118] = 1'b0;
end 
// plainText[ 117 ]
initial
begin
	plainText[117] = 1'b1;
end 
// plainText[ 116 ]
initial
begin
	plainText[116] = 1'b0;
end 
// plainText[ 115 ]
initial
begin
	plainText[115] = 1'b1;
end 
// plainText[ 114 ]
initial
begin
	plainText[114] = 1'b0;
end 
// plainText[ 113 ]
initial
begin
	plainText[113] = 1'b0;
end 
// plainText[ 112 ]
initial
begin
	plainText[112] = 1'b0;
end 
// plainText[ 111 ]
initial
begin
	plainText[111] = 1'b1;
end 
// plainText[ 110 ]
initial
begin
	plainText[110] = 1'b0;
end 
// plainText[ 109 ]
initial
begin
	plainText[109] = 1'b1;
end 
// plainText[ 108 ]
initial
begin
	plainText[108] = 1'b0;
end 
// plainText[ 107 ]
initial
begin
	plainText[107] = 1'b1;
end 
// plainText[ 106 ]
initial
begin
	plainText[106] = 1'b0;
end 
// plainText[ 105 ]
initial
begin
	plainText[105] = 1'b1;
end 
// plainText[ 104 ]
initial
begin
	plainText[104] = 1'b1;
end 
// plainText[ 103 ]
initial
begin
	plainText[103] = 1'b0;
end 
// plainText[ 102 ]
initial
begin
	plainText[102] = 1'b0;
end 
// plainText[ 101 ]
initial
begin
	plainText[101] = 1'b0;
end 
// plainText[ 100 ]
initial
begin
	plainText[100] = 1'b0;
end 
// plainText[ 99 ]
initial
begin
	plainText[99] = 1'b1;
end 
// plainText[ 98 ]
initial
begin
	plainText[98] = 1'b0;
end 
// plainText[ 97 ]
initial
begin
	plainText[97] = 1'b0;
end 
// plainText[ 96 ]
initial
begin
	plainText[96] = 1'b1;
end 
// plainText[ 95 ]
initial
begin
	plainText[95] = 1'b0;
end 
// plainText[ 94 ]
initial
begin
	plainText[94] = 1'b1;
end 
// plainText[ 93 ]
initial
begin
	plainText[93] = 1'b1;
end 
// plainText[ 92 ]
initial
begin
	plainText[92] = 1'b1;
end 
// plainText[ 91 ]
initial
begin
	plainText[91] = 1'b1;
end 
// plainText[ 90 ]
initial
begin
	plainText[90] = 1'b1;
end 
// plainText[ 89 ]
initial
begin
	plainText[89] = 1'b1;
end 
// plainText[ 88 ]
initial
begin
	plainText[88] = 1'b0;
end 
// plainText[ 87 ]
initial
begin
	plainText[87] = 1'b1;
end 
// plainText[ 86 ]
initial
begin
	plainText[86] = 1'b0;
end 
// plainText[ 85 ]
initial
begin
	plainText[85] = 1'b1;
end 
// plainText[ 84 ]
initial
begin
	plainText[84] = 1'b0;
end 
// plainText[ 83 ]
initial
begin
	plainText[83] = 1'b1;
end 
// plainText[ 82 ]
initial
begin
	plainText[82] = 1'b1;
end 
// plainText[ 81 ]
initial
begin
	plainText[81] = 1'b1;
end 
// plainText[ 80 ]
initial
begin
	plainText[80] = 1'b0;
end 
// plainText[ 79 ]
initial
begin
	plainText[79] = 1'b1;
end 
// plainText[ 78 ]
initial
begin
	plainText[78] = 1'b1;
end 
// plainText[ 77 ]
initial
begin
	plainText[77] = 1'b1;
end 
// plainText[ 76 ]
initial
begin
	plainText[76] = 1'b1;
end 
// plainText[ 75 ]
initial
begin
	plainText[75] = 1'b0;
end 
// plainText[ 74 ]
initial
begin
	plainText[74] = 1'b1;
end 
// plainText[ 73 ]
initial
begin
	plainText[73] = 1'b1;
end 
// plainText[ 72 ]
initial
begin
	plainText[72] = 1'b1;
end 
// plainText[ 71 ]
initial
begin
	plainText[71] = 1'b1;
end 
// plainText[ 70 ]
initial
begin
	plainText[70] = 1'b1;
end 
// plainText[ 69 ]
initial
begin
	plainText[69] = 1'b0;
end 
// plainText[ 68 ]
initial
begin
	plainText[68] = 1'b0;
end 
// plainText[ 67 ]
initial
begin
	plainText[67] = 1'b1;
end 
// plainText[ 66 ]
initial
begin
	plainText[66] = 1'b1;
end 
// plainText[ 65 ]
initial
begin
	plainText[65] = 1'b1;
end 
// plainText[ 64 ]
initial
begin
	plainText[64] = 1'b1;
end 
// plainText[ 63 ]
initial
begin
	plainText[63] = 1'b0;
end 
// plainText[ 62 ]
initial
begin
	plainText[62] = 1'b0;
end 
// plainText[ 61 ]
initial
begin
	plainText[61] = 1'b0;
end 
// plainText[ 60 ]
initial
begin
	plainText[60] = 1'b1;
end 
// plainText[ 59 ]
initial
begin
	plainText[59] = 1'b0;
end 
// plainText[ 58 ]
initial
begin
	plainText[58] = 1'b1;
end 
// plainText[ 57 ]
initial
begin
	plainText[57] = 1'b0;
end 
// plainText[ 56 ]
initial
begin
	plainText[56] = 1'b1;
end 
// plainText[ 55 ]
initial
begin
	plainText[55] = 1'b1;
end 
// plainText[ 54 ]
initial
begin
	plainText[54] = 1'b1;
end 
// plainText[ 53 ]
initial
begin
	plainText[53] = 1'b0;
end 
// plainText[ 52 ]
initial
begin
	plainText[52] = 1'b1;
end 
// plainText[ 51 ]
initial
begin
	plainText[51] = 1'b0;
end 
// plainText[ 50 ]
initial
begin
	plainText[50] = 1'b0;
end 
// plainText[ 49 ]
initial
begin
	plainText[49] = 1'b1;
end 
// plainText[ 48 ]
initial
begin
	plainText[48] = 1'b0;
end 
// plainText[ 47 ]
initial
begin
	plainText[47] = 1'b0;
end 
// plainText[ 46 ]
initial
begin
	plainText[46] = 1'b0;
end 
// plainText[ 45 ]
initial
begin
	plainText[45] = 1'b0;
end 
// plainText[ 44 ]
initial
begin
	plainText[44] = 1'b1;
end 
// plainText[ 43 ]
initial
begin
	plainText[43] = 1'b0;
end 
// plainText[ 42 ]
initial
begin
	plainText[42] = 1'b1;
end 
// plainText[ 41 ]
initial
begin
	plainText[41] = 1'b0;
end 
// plainText[ 40 ]
initial
begin
	plainText[40] = 1'b1;
end 
// plainText[ 39 ]
initial
begin
	plainText[39] = 1'b0;
end 
// plainText[ 38 ]
initial
begin
	plainText[38] = 1'b1;
end 
// plainText[ 37 ]
initial
begin
	plainText[37] = 1'b0;
end 
// plainText[ 36 ]
initial
begin
	plainText[36] = 1'b0;
end 
// plainText[ 35 ]
initial
begin
	plainText[35] = 1'b1;
end 
// plainText[ 34 ]
initial
begin
	plainText[34] = 1'b1;
end 
// plainText[ 33 ]
initial
begin
	plainText[33] = 1'b1;
end 
// plainText[ 32 ]
initial
begin
	plainText[32] = 1'b1;
end 
// plainText[ 31 ]
initial
begin
	plainText[31] = 1'b0;
end 
// plainText[ 30 ]
initial
begin
	plainText[30] = 1'b0;
end 
// plainText[ 29 ]
initial
begin
	plainText[29] = 1'b0;
end 
// plainText[ 28 ]
initial
begin
	plainText[28] = 1'b1;
end 
// plainText[ 27 ]
initial
begin
	plainText[27] = 1'b0;
end 
// plainText[ 26 ]
initial
begin
	plainText[26] = 1'b1;
end 
// plainText[ 25 ]
initial
begin
	plainText[25] = 1'b1;
end 
// plainText[ 24 ]
initial
begin
	plainText[24] = 1'b0;
end 
// plainText[ 23 ]
initial
begin
	plainText[23] = 1'b1;
end 
// plainText[ 22 ]
initial
begin
	plainText[22] = 1'b0;
end 
// plainText[ 21 ]
initial
begin
	plainText[21] = 1'b1;
end 
// plainText[ 20 ]
initial
begin
	plainText[20] = 1'b0;
end 
// plainText[ 19 ]
initial
begin
	plainText[19] = 1'b0;
end 
// plainText[ 18 ]
initial
begin
	plainText[18] = 1'b1;
end 
// plainText[ 17 ]
initial
begin
	plainText[17] = 1'b1;
end 
// plainText[ 16 ]
initial
begin
	plainText[16] = 1'b0;
end 
// plainText[ 15 ]
initial
begin
	plainText[15] = 1'b1;
end 
// plainText[ 14 ]
initial
begin
	plainText[14] = 1'b0;
end 
// plainText[ 13 ]
initial
begin
	plainText[13] = 1'b0;
end 
// plainText[ 12 ]
initial
begin
	plainText[12] = 1'b0;
end 
// plainText[ 11 ]
initial
begin
	plainText[11] = 1'b1;
end 
// plainText[ 10 ]
initial
begin
	plainText[10] = 1'b0;
end 
// plainText[ 9 ]
initial
begin
	plainText[9] = 1'b0;
end 
// plainText[ 8 ]
initial
begin
	plainText[8] = 1'b0;
end 
// plainText[ 7 ]
initial
begin
	plainText[7] = 1'b0;
end 
// plainText[ 6 ]
initial
begin
	plainText[6] = 1'b0;
end 
// plainText[ 5 ]
initial
begin
	plainText[5] = 1'b1;
end 
// plainText[ 4 ]
initial
begin
	plainText[4] = 1'b1;
end 
// plainText[ 3 ]
initial
begin
	plainText[3] = 1'b1;
end 
// plainText[ 2 ]
initial
begin
	plainText[2] = 1'b1;
end 
// plainText[ 1 ]
initial
begin
	plainText[1] = 1'b0;
end 
// plainText[ 0 ]
initial
begin
	plainText[0] = 1'b0;
end 

aes_vlg_sample_tst tb_sample (
	.clock(clock),
	.keyIni(keyIni),
	.plainText(plainText),
	.sampler_tx(sampler)
);

aes_vlg_check_tst tb_out(
	.outAes(outAes),
	.sampler_rx(sampler)
);
endmodule

